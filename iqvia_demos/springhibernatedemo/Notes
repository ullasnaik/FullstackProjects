 DataBase Access with JDBC
--------------------------
JDBC - API
Oralce, MySql, MysqlServer create packages which implement the JDBC API (Drivers)

1. Registering a Driver class
2. Create a Connection - using driver class and URL
3. Create a statement object to send the query
4. Set the parameters in the query
4. Execute the query using statement object
5. Get the result from database in form of ResulSet
6. Process the resultset to get the data
7. Close the Connection
8. Handle SQlException

Boilerplate code - repeated code

Paradigm Mismatch
-----------------
uniqueness : OOP : reference, equals  
			 RDBMS : primary key

Association: OOP - HAS-A
			 RDBMS - foreign key
			 

Inheritance: OOP - IS-A
			 RDBMS : none

ORM - Hibernate, ibatis, toplink etc

JPA - Java Persistence API  - Hibernate implements JPA

JPQL - HQL

Hibernate
------------
1. ORM Tool  - Object Relation Mapping  OOP -- RDBMS
2. Hibernate Queries are not dependent on a particular database 
	- Write query in HQL 
	- convert this query in to specific DB query based on dialect you provide
	: dialect for each database
3. HIbernate can generate tables based on a OOP domain Model
4. Provide methods for CRUD operations 
5. JPA - Java Persistence API : Hibernate implement JPA

Class in OOP:  Contact - id, name, category, phone
Table in RDBMS: MY_CONTACTS - CONT_ID, CONT_NAME, CONT_CATG, CONT_PHONE



Hibernate Architecture
----------------------
 SessionFactory - represents the Object and relation mapping
 				- Used for creating sessions
 				- Heavy weight object
 				- Singleton in any application
 
 Session  - Represents a connection to a database
 		  - Any access/manipulation to be done on Db should be done using this object
 		  - You can create multiple sessions for doing multiple operations with DB
 		  - SingleThreaded
 Transaction
 		  - Defines boundary limit for a unit of work/set of queries
 		  
 		  
Spring with Hibernate
-------------------------
Spring JDBC - Spring own abstraction of JDBC , Not ORM

Spring ORM 	- module which integrates other ORM frameworks with Spring
			
			- DataSource 
				- Contains details of connection like url, userid, pass etc 
			
			- LocalSessionFactoryBean 
					- For creating Hibernate Session factory
					- set the Datasource
					- Hibernate properties like 
							dialect - Queries have to be generated for which Db
							hbm2ddl.auto - Whether Hibernate should create tables or not
							show_sql : Hibernate generated queries are shown on Console
			
			- HibernateTransactionManager
 	

Annotations for O/R mapping
-------------------------------

@Entity
@Id

@Table
@Column
 	
 		
	STEPS
	
	1. Add dependencies to a Maven Project
		 Maven Dependencies
	   	<!-- Spring Context -->
	  	<!-- Spring ORM -->
	  	<!-- Hibernate core -->
	  	<!-- MySQL Connector -->
	  	<!-- Apache Commons DBCP -->
	  	
	2. Create Java based Bean Configuration class
		- Configure Datasource bean
		- Configure SessionFactory bean
		- Configure TransactionManager bean	
		
	3. Create a Product class and do a O/R mapping using annotations like @Entity
	
	4. Created a DAO class and injected Session factory
	
	5. Created a Main app and executed the DAO method
	
	
	
-------------
 HashMap
 Hashtable -> Dictionary -> Properties		  
 
 Associations
 --------------
 	
 1:1  - @OneToOne					Employee - Passport / default - Eager
 1:M  - @OneToMany  @ManyToOne		Category - Notes, Contact - Phone / defaut - lazy
 M:N  - ManyToMany					Student - Course 

 Type of Association
 ---------------------
 UniDirectional and bidirectional
 
 Fetch Type
 -------------------------------
 eager
 lazy
 
 Cascade : 
 
 
Primary Keys:
--------------
If primary keys need to be autogenerated use below annotation

	@GeneratedValue(strategy = GenerationType.IDENTITY)  //MYSQL
	@GeneratedValue(strategy = GenerationType.SEQUENCE)  //ORACLE
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	